{"version":3,"sources":["array/chunk.js","array/compact.js","array/concat.js","array/difference.js","array/drop.js","array/dropRight.js","array/fill.js","index.js"],"names":["chunk","array","size","newArr","reduce","acc","v","i","a","push","length","compact","concat","arr","value","forEach","Array","isArray","element","difference","arr1","arr2","filter","includes","drop","n","slice","dropRight","fill","start","end","_","name1","console","log","x"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAGe,SAASA,KAAT,CAAeC,KAAf,EAAgC;AAAA,MAAVC,IAAU,uEAAH,CAAG;AAC7C,MAAIC,MAAM,GAAG,EAAb;AACAF,EAAAA,KAAK,CAACG,MAAN,CAAa,UAACC,GAAD,EAAMC,CAAN,EAASC,CAAT,EAAYC,CAAZ,EAAkB;AAC7BH,IAAAA,GAAG,CAACI,IAAJ,CAASH,CAAT;;AACA,QAAI,CAACC,CAAC,GAAG,CAAL,IAAUL,IAAV,IAAkB,CAAlB,IAAwBK,CAAC,GAAG,CAAL,IAAWC,CAAC,CAACE,MAAxC,EAAgD;AAC9CP,MAAAA,MAAM,CAACM,IAAP,CAAYJ,GAAZ;AACAA,MAAAA,GAAG,GAAG,EAAN;AACD;;AACD,WAAOA,GAAP;AACD,GAPD,EAOG,EAPH;AAQA,SAAOF,MAAP;AACD,EACD;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;AC3BA;AAEA;AACA;AAEe,SAASQ,OAAT,CAAiBV,KAAjB,EAAwB;AACrC,SAAOA,KAAK,CAACG,MAAN,CAAa,UAACC,GAAD,EAAMC,CAAN,EAAY;AAC9B,QAAIA,CAAJ,EAAOD,GAAG,CAACI,IAAJ,CAASH,CAAT;AACP,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,EACD;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;ACxBA;AAEA;AACA;AACA;AAEe,SAASO,MAAT,CAAgBC,GAAhB,EAA+B;AAC5C,MAAIV,MAAM,sBAAOU,GAAP,CAAV;;AAD4C,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AAE5CA,EAAAA,KAAK,CAACC,OAAN,CAAc,UAAAT,CAAC,EAAI;AACjB,QAAIU,KAAK,CAACC,OAAN,CAAcX,CAAd,CAAJ,EAAsB;AACpBA,MAAAA,CAAC,CAACS,OAAF,CAAU,UAAAG,OAAO;AAAA,eAAIf,MAAM,CAACM,IAAP,CAAYS,OAAZ,CAAJ;AAAA,OAAjB;AACD,KAFD,MAGKf,MAAM,CAACM,IAAP,CAAYH,CAAZ;AACN,GALD;AAMA,SAAOH,MAAP;AACD,EACD;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;AC5BA;AAEA;AACA;AACA;AAEA;AACe,SAASgB,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC7C,SAAOD,IAAI,CAACE,MAAL,CAAY,UAAAhB,CAAC;AAAA,WAAI,CAACe,IAAI,CAACE,QAAL,CAAcjB,CAAd,CAAL;AAAA,GAAb,CAAP;AACD,EACD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AAEA;AACe,SAASkB,IAAT,CAAcvB,KAAd,EAA4B;AAAA,MAAPwB,CAAO,uEAAH,CAAG;AACzC,SAAOxB,KAAK,CAACyB,KAAN,CAAYD,CAAZ,CAAP;AACD,EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;AChCA;AACA;AACA;AACA;AAEA;AACe,SAASE,SAAT,CAAmB1B,KAAnB,EAAiC;AAAA,MAAPwB,CAAO,uEAAH,CAAG;AAC9C,SAAQxB,KAAK,CAACyB,KAAN,CAAY,CAAZ,EAAe,CAACD,CAAhB,KAAsB,EAA9B;AACD,EACD;AACA;AAGA;AACA;AACA;AAEA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AAEe,SAASG,IAAT,CAAcf,GAAd,EAAmBC,KAAnB,EAAuD;AAAA,MAA7Be,KAA6B,uEAArB,CAAqB;AAAA,MAAlBC,GAAkB,uEAAZjB,GAAG,CAACH,MAAQ;AACpEG,EAAAA,GAAG,GAAGA,GAAG,CAACT,MAAJ,CAAW,UAACC,GAAD,EAAMC,CAAN,EAASC,CAAT,EAAe;AAC9B,QAAIA,CAAC,IAAIsB,KAAL,IAActB,CAAC,GAAGuB,GAAtB,EAA2B;AACzBzB,MAAAA,GAAG,CAACI,IAAJ,CAASK,KAAT;AACD,KAFD,MAEOT,GAAG,CAACI,IAAJ,CAASH,CAAT;;AACP,WAAOD,GAAP;AACD,GALK,EAKH,EALG,CAAN;AAMA,SAAOQ,GAAP;AACD,EACD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAIA,IAAIkB,CAAC,GAAG;AACN/B,EAAAA,KAAK,EAALA,cADM;AAENW,EAAAA,OAAO,EAAPA,gBAFM;AAGNC,EAAAA,MAAM,EAANA,eAHM;AAINO,EAAAA,UAAU,EAAVA,mBAJM;AAKNK,EAAAA,IAAI,EAAJA,aALM;AAMNG,EAAAA,SAAS,EAATA,kBANM;AAONC,EAAAA,IAAI,EAAJA;AAPM,CAAR;AAUA,IAAII,KAAK,GAAG,OAAZ;AACAC,OAAO,CAACC,GAAR,CAAYH,CAAZ;;AACC,IAAII,CAAC,GAAEJ,CAAC,CAAC/B,KAAF,CAAQ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAR,EAAoB,CAApB,CAAP;;AACAiC,OAAO,CAACC,GAAR,CAAYC,CAAZ","file":"loDash clone.e31bb0bc.map","sourceRoot":"..","sourcesContent":["// Creates an array of elements split into groups the length of size.If array can't be split evenly, the final chunk will be the remaining elements.\n\n// ++++ARGUMENT++++\n// array(Array): The array to process.\n// [size = 1](number): The length of each chunk\n\n\nexport default function chunk(array, size = 1) {\n  let newArr = [];\n  array.reduce((acc, v, i, a) => {\n    acc.push(v);\n    if ((i + 1) % size == 0 || (i + 1) >= a.length) {\n      newArr.push(acc);\n      acc = [];\n    }\n    return acc;\n  }, [])\n  return newArr;\n}\n// +++RETURN+++\n// (Array): Returns the new array of chunks.\n\n// +++EXAMPLE+++\n// chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n// chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]","// Creates an array with all falsey values removed.The values false, null, 0, \"\", undefined, and NaN are falsey.\n\n// ++++ARGUMENT++++\n// array(Array): The array to compact.\n\nexport default function compact(array) {\n  return array.reduce((acc, v) => {\n    if (v) acc.push(v);\n    return acc;\n  }, [])\n}\n// without reduce working\n// function compact(array) {\n//     return array.filter(v => Boolean(v));\n// }\n\n// +++RETURN+++\n// (Array): Returns the new array of filtered values.\n\n// +++EXAMPLE+++\n// compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n\n// compact([0, 1, false, 2, '', 3, NaN, 4, null, 5, undefined]);\n// => [1, 2, 3, 4, 5]\n\n","// Creates a new array concatenating array with any additional arrays and / or values.\n\n// ++++ARGUMENT++++\n// array(Array): The array to concatenate.\n// [values](...*): The values to concatenate.\n\nexport default function concat(arr, ...value) {\n  let newArr = [...arr];\n  value.forEach(v => {\n    if (Array.isArray(v)) {\n      v.forEach(element => newArr.push(element));\n    }\n    else newArr.push(v);\n  });\n  return newArr;\n}\n// +++RETURN+++\n// (Array): Returns the new concatenated array.\n\n\n// +++EXAMPLE+++\n// var array = [1];\n// var other = concat(array, 2, [3], [[4]]);\n\n// console.log(other);\n// // => [1, 2, 3, [4]]\n\n// console.log(array);\n// => [1]","// Creates an array of array values not included in the other given arrays using SameValueZero for equality comparisons.The order and references of result values are determined by the first array.\n\n// ++++ARGUMENT++++\n// array(Array): The array to inspect.\n// [values](...Array): The values to exclude.\n\n// without redeeuce and with just 2nd argument as array\nexport default function difference(arr1, arr2) {\n  return arr1.filter(v => !arr2.includes(v));\n}\n//with Reduce working with second arg as rest Argument\n// function difference(arr1, arr2) {\n//   return arr1.reduce((acc,v) => {\n//     arr2.includes(v) ? null : acc.push(v);\n//     return acc;\n//   },[])\n// }\n\n// +++RETURN+++\n// (Array): Returns the new array of filtered values.\n\n\n// +++EXAMPLE+++\n// difference([2, 1], [2, 3]);\n// => [1]\n\n// difference([2, 1,3,4], [2, 3]);\n// => [1,4]","// Creates a slice of array with n elements dropped from the beginning.\n// ++++ARGUMENT++++\n// array(Array): The array to query.\n// [n = 1](number): The number of elements to drop.\n\n// with slice\nexport default function drop(array, n = 1) {\n  return array.slice(n);\n}\n\n//without slice with reduce working\n// function drop(array, n = 1) {\n//  return array.reduce( (acc,value,i)=>{\n//     if(i >= n) acc.push(value); \n//     return acc;\n//  },[])\n// }\n// +++RETURN+++\n// (Array): Returns the slice of array.\n\n\n// +++EXAMPLE+++\n// drop([1, 2, 3]);\n// => [2, 3]\n\n// drop([1, 2, 3], 2);\n// => [3]\n\n// drop([1, 2, 3], 5);\n// => []\n\n// drop([1, 2, 3], 0);\n// => [1, 2, 3]","// Creates a slice of array with n elements dropped from the end.\n// ++++ARGUMENT++++\n// array(Array): The array to query.\n// [n = 1](number): The number of elements to drop.\n\n// with slice\nexport default function dropRight(array, n = 1) {\n  return (array.slice(0, -n) || [])\n}\n// +++RETURN+++\n// (Array): Returns the slice of array.\n\n\n// +++EXAMPLE+++\n// dropRight([1, 2, 3], 2);\n// => [1]\n\n// dropRight([1, 2, 3], 5);\n// => []\n","//Fills elements of array with value from start up to, but not including, end.\n// // ++++ARGUMENT++++\n// array(Array): The array to fill.\n// value(*): The value to fill array with.\n// [start = 0](number): The start position.\n// [end = array.length](number): The end position.\n\nexport default function fill(arr, value, start = 0, end = arr.length) {\n  arr = arr.reduce((acc, v, i) => {\n    if (i >= start && i < end) {\n      acc.push(value);\n    } else acc.push(v);\n    return acc;\n  }, [])\n  return arr;\n}\n// +++RETURN+++\n// (Array): Returns array.\n\n// +++EXAMPLE+++\n// fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n// var array = [1,2,3]\n// fill(array, 'a');\n// console.log(array);\n// => ['a', 'a', 'a']","import chunk from \"./array/chunk\";\nimport compact from \"./array/compact\";\nimport concat from \"./array/concat\";\nimport difference from \"./array/difference\";\nimport drop from \"./array/drop\";\nimport dropRight from \"./array/dropRight\";\nimport fill from \"./array/fill\";\n\n\n\nvar _ = {\n  chunk,\n  compact,\n  concat,\n  difference,\n  drop,\n  dropRight,\n  fill\n}\n\nvar name1 = \"hello\";\nconsole.log(_);\n var x =_.chunk([1,2,3,4,5],2);\n console.log(x);\n"]}